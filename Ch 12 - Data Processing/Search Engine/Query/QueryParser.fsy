// Copyright 2012 Chris Smith. All Rights Reserved.

%{

open Query.Ast

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <System.String> TERM
%token QUOTATION_MARK LEFT_PAREN RIGHT_PAREN
%token AND OR
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Query.Ast.Query list > start

%%

// Returns a list of query objects.
start: UserQuery { $1 }

UserQuery:
	| UserQuery EOF         { $1 }
	| SingleQuery           { [$1] }
	| UserQuery SingleQuery { $2 :: $1 }

SingleQuery:
	| TERM                                 { Term($1)     }
	| QUOTATION_MARK Phrase QUOTATION_MARK { Phrase($2)   }
	| SingleQuery AND SingleQuery          { And($1, $3)  }
	| SingleQuery OR SingleQuery           { Or($1, $3)   }
	| LEFT_PAREN SingleQuery RIGHT_PAREN   { SubQuery($2) }

Phrase:
	| TERM        { [$1] }
	| Phrase TERM { $2 :: $1 }
